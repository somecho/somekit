{"version":3,"sources":["somekit/math.cljs"],"mappings":";AAEA,AAAA,AAEA,AAAKA,mBAAI,WAAA,VAAGC;AAEZ;;;qBAAA,rBAAMC,kDAAuCC;AAA7C,AAAgD,sCAAA,/BAACC,cAAI,AAACC,cAAIF;;AAE1D;;;oBAAA,pBAAMG,gDAAuBH;AAA7B,AAA+B,YAAA,JAAGA;;AAElC,oBAAA,pBAAMI,gDAAMC,EAAEC,EAAEC;AAAhB,AAAmB,QAAG,CAAG,CAAA,MAAKA,KAAGF,KAAG,CAAGE,IAAED;;AAEzC;;;kBAAA,lBAAME,4CAA4BR;AAAlC,AAAqC,QAAGF,UAAQE;;AAEhD,AAAA;;;sBAAA,8BAAAS,pDAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,kDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,kDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,oDAAA,pDAAMD;AAAN,AAEM,OAACE;;;AAFP,CAAA,oDAAA,pDAAMF,+DAGFN;AAHJ,AAGO,OAACQ,6CAAKR;;;AAHb,CAAA,oDAAA,pDAAMM,+DAIFN,EAAEC;AAJN,AAIS,IAAAQ,WAAO,AAACM;IAARL,WAAA;IAAAC,WAAA;IAAAC,WAAoBZ;IAApBa,WAAsBZ;AAAtB,AAAA,4GAAAQ,SAAAC,SAAAC,SAAAC,SAAAC,yCAAAJ,SAAAC,SAAAC,SAAAC,SAAAC,rNAACC,mDAAAA,iGAAAA;;;AAJV,CAAA,8CAAA,9CAAMR;;AAAN,AAMA,AAAA;;;;2BAAA,mCAAAF,9DAAMa;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,uDAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAV,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,yDAAA,zDAAMU;AAAN,AAGM,wBAAA,hBAAG,AAACC;;;AAHV,CAAA,yDAAA,zDAAMD,oEAIFE;AAJJ,AAIe,QAAG,AAACD,gBAAaC;;;AAJhC,CAAA,mDAAA,nDAAMF;;AAAN,AAMA;;;iCAAA,jCAAMG,0EAEHC,KAAKC;AAFR,2BAGM,CAACA,mCAAAA,qCAAAA,1EACD,2FAAG,AAACC,gBAAMF,tHACV,AAACG,fACD,IAAAC;AAAA,AAAA,gFAAAA,2BAAAA,nGAACJ,qCAAAA,+CAAAA;;AAEP;;;iCAAA,jCAAMK,0EAEHC,OAAOC;AAFV,AAAA,0FAEiB,CAAGD,SAAO,QAAA,PAAGC,aAAW,CAAGD,SAAO,QAAA,PAAGC;;AAEtD;;;qBAAA,rBAAMd,kDAEFnB,EAAEkC,OAAOC,MAAMC,OAAOC;AAF1B,AAGG,QAAG,CAAG,CAAG,CAAGrC,IAAEkC,UAAQ,CAAGC,QAAMD,WACzB,CAAGG,QAAMD,WAASA;;AAE3B;;;8BAAA,9BAAME,oEAEHtC,EAAEwB;AAFL,AAEgB,GAAI,CAAGxB,IAAEwB;AAAT;;AAAA","names":["somekit.math/TAU","Math/PI","somekit.math/fract","n","cljs.core/mod","cljs.core/abs","somekit.math/half","somekit.math/lerp","a","b","t","somekit.math/pi","var_args","G__11439","somekit.math/random","js/Error","cljs.core.rand","G__11440","G__11441","G__11442","G__11443","G__11444","somekit.math/scale","somekit.math.random","G__11446","somekit.math/random-bool","Math/random","threshold","somekit.math/random-nth-custom","coll","fn","cljs.core/count","Math/floor","G__11447","somekit.math/range-from-center","center","size","start1","stop1","start2","stop2","somekit.math/threshold-bool"],"sourcesContent":["(ns somekit.math)\n\n(declare scale)\n\n(def TAU (* Math/PI 2))\n\n(defn fract \"get fractional part of number\" [n] (mod (abs n) 1))\n\n(defn half \"halfs a number\" [n](* n 0.5))\n\n(defn lerp [a b t] (+ (* (- 1 t) a) (* t b)))\n\n(defn pi \"Returns PI * argument\" [n] (* Math/PI n))\n\n(defn random\n  \"Wraps Math/random with arguments.\"\n  ([] (rand))\n  ([a] (rand a))\n  ([a b] (scale (random) 0 1 a b)))\n\n(defn random-bool\n  \"Returns true if random is greater than threshold. If no argument is given,\n  threshold is 0.5 by default.\"\n  ([] (> (Math/random) 0.5))\n  ([threshold] (> (Math/random) threshold)))\n\n(defn random-nth-custom\n  \"returns random element from collection with custom random\"\n  [coll fn]\n  (-> (fn)\n      (* (count coll))\n      (Math/floor)\n      (coll)))\n\n(defn range-from-center\n  \"Returns two numbers defining a range given a center and a range size\"\n  [center size] [(- center (* size 0.5)) (+ center (* size 0.5))])\n\n(defn scale\n  \"scales a number to a new range\"\n  ([n start1 stop1 start2 stop2]\n   (+ (* (/ (- n start1) (- stop1 start1))\n         (- stop2 start2)) start2)))\n\n(defn threshold-bool\n  \"returns true if number is greater than threshold\"\n  [n threshold] (if (> n threshold) true false))\n"]}
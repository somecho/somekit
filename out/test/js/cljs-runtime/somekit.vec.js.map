{"version":3,"sources":["somekit/vec.cljs"],"mappings":"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","names":["somekit.vec/add","v1","v2","cljs.core.map","cljs.core/+","somekit.vec/add-scalar","v","scalar","p1__13092#","somekit.vec/angle","vec__13093","cljs.core.nth","x","y","Math/atan2","somekit.vec/angle-between","somekit.vec/div","cljs.core//","somekit.vec/div-scalar","p1__13096#","somekit.vec/distance","G__13097","somekit.vec/length","somekit.vec/sub","somekit.vec/dot","cljs.core.reduce","somekit.vec/mul","somekit.vec/from-angle","theta","somekit.vec/from-polar","radius","Math/cos","Math/sin","cljs.core/*","Math/sqrt","somekit.vec/lerp","t","a","b","somekit.math/lerp","f","somekit.vec/limit","l","somekit.vec/set-length","somekit.vec/mul-scalar","p1__13098#","somekit.vec/normalize","p1__13099#","somekit.vec/random","N","cljs.core/vec","cljs.core.repeatedly","Math/random","somekit.vec/random-polar","Math/PI","somekit.vec/rotate","cljs.core/-","somekit.vec/sub-scalar","p1__13100#"],"sourcesContent":["(ns somekit.vec\n  (:require [somekit.math :as sm]))\n\n(declare from-polar)\n(declare mul)\n(declare length)\n(declare set-length)\n(declare sub)\n\n(defn add\n  \"adds two vectors of same dimension together\"\n  [v1 v2] (map + v1 v2))\n\n(defn add-scalar\n  \"Adds a scalar to a vector\"\n  [v scalar] (map #(+ % scalar) v))\n\n(defn angle\n  \"Returns angle of a 2D vector\"\n  [v] (let [[x y] v] (Math/atan2 y x)))\n\n(defn angle-between\n  \"Calculates the angle between two 2D Vectors using angle difference.\"\n  [v1 v2] (- (angle v2) (angle v1)))\n\n(defn div\n  \"Divides one vector by another. Both must be same dimension.\"\n  [v1 v2] (map / v1 v2))\n\n(defn div-scalar\n  \"Divides vector by a scalar\"\n  [v scalar] (map #(/ % scalar) v))\n\n(defn distance\n  \"Calculates distance between two vectors of same dimension\"\n  [v1 v2] (length (sub v1 v2)))\n\n(defn dot\n  \"Dot product of two vectors\"\n  [v1 v2] (reduce + (mul v1 v2)))\n\n(defn from-angle\n  \"Returns a 2D unit vector with given angle\"\n  [theta] (from-polar theta 1))\n\n(defn from-polar\n  \"Returns a 2D vector from polar coordinates\"\n  [theta radius] [(* radius (Math/cos theta)) (* radius (Math/sin theta))])\n\n(defn length\n  \"Returns the length of a vector of any dimension.\"\n  [v] (->> (map * v v) (reduce +) (Math/sqrt)))\n\n(defn lerp\n  \"Lerps between two vectors\"\n  [v1 v2 t] (letfn [(f [a b] (sm/lerp a b t))] (map f v1 v2)))\n\n(defn limit\n  \"If vector v is bigger than limit l, vector gets scaled to l.\"\n  [v l] (if (> (length v) l) (set-length v l) v))\n\n(defn mul\n  \"Multiplied two vectors of same dimensions\"\n  [v1 v2] (map * v1 v2))\n\n(defn mul-scalar\n  \"Multiplies vector by a scalar\"\n  [v scalar] (map #(* % scalar) v))\n\n(defn normalize\n  \"Returns a vector of any dimension normalized\"\n  [v] (map #(/ % (length v)) v))\n\n(defn random\n  \"Returns a random vector of N dimension. Values between 0 and 1.\"\n  [N] (vec (repeatedly N Math/random)))\n\n(defn random-polar\n  \"returns a 2D vector from a random angle and radius between 0 and 1\"\n  [] (from-polar (* (Math/random) Math/PI 2) (Math/random)))\n\n(defn rotate\n  \"rotates a 2D vector by an angle\"\n  [v theta] (from-polar (+ (angle v) theta) (length v)))\n\n(defn set-length\n  \"Returns the vector v with given length l.\"\n  [v l] (mul-scalar (normalize v) l))\n\n(defn sub\n  \"Substracts 2 vectors of same dimension\"\n  [v1 v2]\n  (map - v1 v2))\n\n(defn sub-scalar\n  \"Subtracts scalar from vector\"\n  [v scalar] (map #(- % scalar) v))\n"]}